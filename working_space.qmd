---
title: "working_space_leafcutter"
format: html
editor: source
---

```{R, echo=FALSE, include=FALSE}
library(tidyverse)
library(readxl)
library(ggplot2)
library(ggforce)
library(dplyr)
library(agricolae)
library(purrr)
library(readxl)
library(openxlsx)
```

## Leaf Area vs. Distance Analysis

### Make dataframe from excel
```{R}
df <- read_xlsx("~/Desktop/Spring 2024/Field Ecology Lab/Leafcutters Jan 2024/Excel Sheets/No statistics.xlsx")
```

### Tidy, remove NA, and order
```{R}
df_long <- tidyr::gather(df, key = "Distance", value = "Area")

df_long$Distance <- as.character(df_long$Distance)

df_long_nona <- df_long[complete.cases(df_long$Area), ]

df_long_nona$Distance <- as.character(df_long_nona$Distance)

df_long_nona$Distance <- factor(df_long_nona$Distance, levels = unique(df_long_nona$Distance))

has_identical_rows <- any(duplicated(df_long_nona) | duplicated(df_long_nona, fromLast = TRUE))

if (has_identical_rows) {
  cat("The data frame has identical rows.\n")
} else {
  cat("The data frame does not have identical rows.\n")
}

identical_rows <- df_long_nona[duplicated(df_long_nona) | duplicated(df_long_nona, fromLast = TRUE), ]
print(identical_rows, n = Inf)
unique_df <- df_long_nona[!duplicated(df_long_nona) & !duplicated(df_long_nona, fromLast = TRUE), ]
```

### Make a box-and-whisker plot
```{R}
ggplot(unique_df, aes(x = Distance, y = Area)) +
  geom_boxplot() +
  labs(title = "",
       x = "Distance from Colony Main Entrance (m)",
       y = "Leaf Surface Area (cm^2)") +
  theme(panel.background = element_rect(fill = "white"),
        panel.grid = element_line(color = "white"),
        panel.grid.major.x = element_line(color = "white"))+
  scale_y_continuous(breaks = seq(0, max(unique_df$Area), by = 0.5))
```

### Make a scatter plot with jitter
```{R}
ggplot(unique_df, aes(x = Distance, y = Area)) +
  geom_point(position = position_jitter(width = 0.1, height = 0.1), color = "darkgreen", alpha = 0.1) +
  labs(title = "",
       x = "Distance from Colony Main Entrance (m)",
       y = "Leaf Surface Area (cm^2)") +
  theme(panel.background = element_rect(fill = "white"),
        panel.grid = element_line(color = "white"),
        panel.grid.major.x = element_line(color = "white")) +
  scale_y_continuous(breaks = seq(0, max(unique_df$Area), by = 0.5))
```

### Add violin plot
```{R}
ggplot(unique_df, aes(x = Area, y = Distance)) +
  geom_violin() +
  geom_sina(color = "darkgreen", alpha = 0.5) +  # Use geom_sina for adjusted jitter
  labs(title = "",
       x = "Leaf Surface Area (cm^2)",
       y = "Distance from Colony Main Entrance (m)") +
  theme(panel.background = element_rect(fill = "white"),
        panel.grid = element_line(color = "white"),
        panel.grid.major.y = element_line(color = "white")) +
  scale_x_continuous(breaks = seq(0, max(unique_df$Area), by = 0.5)) +
  coord_flip()
```

### Make a bar chart
```{R}
# Calculate means and standard errors using dplyr
summary_data <- unique_df %>%
  group_by(Distance) %>%
  summarize(Mean = mean(Area, na.rm = TRUE),
            SE = sd(Area, na.rm = TRUE) / sqrt(sum(!is.na(Area))))

ggplot(summary_data, aes(x = Distance, y = Mean, fill = factor(Distance))) +
  geom_bar(stat = "identity", position = "dodge", fill = ifelse(summary_data$Distance == "0", "firebrick3", "darkslategray4")) +
  geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), position = position_dodge(width = 0.8), width = 0.25) +
  labs(title = "",
       x = "Distance from Colony Main Entrance (m)",
       y = "Leaf Surface Area (cm^2)") +
  theme(legend.position = "none",
        panel.background = element_rect(fill = "white"),
        panel.grid = element_line(color = "white"),
        panel.grid.major.x = element_line(color = "white"))
```

## Leaf area statistics
### One-way ANOVA
```{R, echo=FALSE, include=FALSE}
na.omit(unique_df)
```

```{R}
model <- aov(Area ~ Distance, data = unique_df)
summary(model)
```

### Tukey Test
```{R}
tukey_results <- HSD.test(model, "Distance")
print(tukey_results)
```

## Removal of outliers
```{R}
# Load necessary libraries
library(dplyr)

# Specify the columns for which you want to check outliers
columns_to_check <- c("Area", "Distance")

# Function to remove outliers based on box-and-whisker plot
remove_outliers <- function(x) {
  bp <- boxplot(x, plot = FALSE)
  outliers <- bp$out
  return(outliers)
}

# Identify and store outliers
outliers_list <- unique_df %>%
  group_by(Distance) %>%
  summarise(across(all_of("Area"), remove_outliers)) %>%
  unnest(cols = c(Area))

# Create df_no_outliers by removing outliers for each column
df_no_outliers <- unique_df %>%
  anti_join(outliers_list, by = c("Distance" = "Distance", "Area" = "Area"))
```


## Leaf Mass and Count Analysis
### Create a Dataframe
```{R}
# Extract the means from the summary_data dataframe
area_vector <- summary_data$Mean
distance_vector <- summary_data$Distance

#Extract mass and count from excel
mass_count_excel_file_path <- "~/Desktop/Spring 2024/Field Ecology Lab/Leafcutters Jan 2024/Excel Sheets/Area Data.xlsx"
```
```{R, include=FALSE}
df_2 <- read_excel(mass_count_excel_file_path)
```

```{R}
# Assuming unique_df is your dataframe
distance_counts <- table(unique_df$Distance)

# Print the counts
print(distance_counts)
```