---
title: "Leaf_Analysis"
format: html
editor: source
---
## Context
From January 1-15, 2024, I visited Costa Rica as a class trip. I conducted an observational study on foraging behavior of leafcutter ants.  My goal is to assess qualities of leaves that are rejected far from the colony, vs. leaves that are carried all the way to the colony entrance and rejected at the doorstep.

## Packages
* tidyverse
* readxl
* ggplot2
* dplyr
```{R, echo=FALSE, include=FALSE}
library(tidyverse)
library(readxl)
library(ggplot2)
library(dplyr)
```

## Leaf Area vs. Distance Analysis

### Make dataframe from excel
```{R}

df <- read_excel("~/Desktop/Spring 2024/Field Ecology Lab/Leafcutters Jan 2024/Excel Sheets/No statistics.xlsx")
```

### Tidy, remove NA, and order
```{R}
df_long <- tidyr::gather(df, key = "Distance", value = "Area")

df_long$Distance <- as.character(df_long$Distance)

df_long_nona <- df_long[complete.cases(df_long$Area), ]

df_long_nona$Distance <- factor(df_long_nona$Distance, levels = unique(df_long_nona$Distance))
```

### Make a box-and-whisker plot
```{R}
ggplot(df_long_nona, aes(x = Distance, y = Area)) +
  geom_boxplot() +
  labs(title = "",
       x = "Distance from Colony Main Entrance (m)",
       y = "Leaf Surface Area (cm^2)")
```

### Make a bar chart
```{R}
# Calculate means and standard errors using dplyr
summary_data <- df_long_nona %>%
  group_by(Distance) %>%
  summarize(Mean = mean(Area, na.rm = TRUE),
            SE = sd(Area, na.rm = TRUE) / sqrt(sum(!is.na(Area))))

ggplot(summary_data, aes(x = Distance, y = Mean, fill = factor(Distance))) +
  geom_bar(stat = "identity", position = "dodge", fill = ifelse(summary_data$Distance == "0", "firebrick3", "darkslategray4")) +
  geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), position = position_dodge(width = 0.8), width = 0.25) +
  labs(title = "",
       x = "Distance from Colony Main Entrance (m)",
       y = "Leaf Surface Area (cm^2)") +
  theme(legend.position = "none")
```

## Leaf Mass and Count Analysis
### Create a Dataframe
```{R}
# Extract the means from the summary_data dataframe
area_vector <- summary_data$Mean
distance_vector <- summary_data$Distance

#Extract mass and count from excel
mass_count_excel_file_path <- "~/Desktop/Spring 2024/Field Ecology Lab/Leafcutters Jan 2024/Excel Sheets/Area Data.xlsx"
```
```{R, include=FALSE}
df_2 <- read_excel(mass_count_excel_file_path)
```
```{R}
leaf_count_row <- df_2[2, ]
count_vector <- as.vector(unlist(leaf_count_row))
count_vector <- count_vector[count_vector != "count"]
count_vector <- count_vector[count_vector != "1553"]
count_vector <- as.numeric(count_vector)

leaf_mass_row <- df_2[1, ]
mass_vector <- as.vector(unlist(leaf_mass_row))
mass_vector <- mass_vector[mass_vector != "mass"]
mass_vector <- mass_vector[mass_vector != "39.5"]
mass_vector <- as.numeric(mass_vector)


mass_per_leaf <- mass_vector / count_vector

mass_per_area <- mass_vector / area_vector / count_vector  

quadrat_data <- data.frame(
  Distance = distance_vector,
  Area = area_vector,
  Mass = mass_vector,
  Count = count_vector,
  MpreL = mass_per_leaf,
  MperA = mass_per_area
)
#change row headers
colnames(quadrat_data) <-
c("Distance (m)", "Avg Area (cm²)", "Mass (g)", "Count","g/leaf", "g/cm²")
print(quadrat_data, row.names = FALSE)
```

### Plot Leaf Mass vs. Distance
```{R}
#establish data
x <- 0:23
y <- mass_vector[-(1:2)]
z <- count_vector[-(1:2)]

plot(x, y, main = "Leaf Mass vs. Distance from Main Colony Entrance", xlab = "Distance (m)", ylab = "Leaf Mass (g)", col = "blue", pch = 16)

#Add an exponential line of best fit
fit <- lm(log(y) ~ x)

# Generate predicted values for the exponential fit
x_pred <- seq(min(x), max(x), length.out = 100)
y_pred <- exp(predict(fit, newdata = data.frame(x = x_pred)))

# Add the exponential line to the plot
lines(x_pred, y_pred, col = "blue", type = "l")

#add the equation of best fit
# Extract coefficients and transform back from log scale
a <- exp(coef(fit)[1])
b <- coef(fit)[2]

# Print the equation on the plot
eq <- sprintf("y = %.2f * exp(%.2fx)", a, b)
text(3, max(y), eq, pos = 4, col = "black", cex = 0.8)
```

### Plot Leaf Count vs. Distance
```{R}
plot(x, z, main = "Leaf Count vs. Distance from Main Colony Entrance", xlab = "Distance (m)", ylab = "Leaf Count", col = "firebrick2", pch = 16)
fit <- lm(log(z) ~ x)
x_pred <- seq(min(x), max(x), length.out = 100)
z_pred <- exp(predict(fit, newdata = data.frame(x = x_pred)))
lines(x_pred, z_pred, col = "firebrick2", type = "l")
a <- exp(coef(fit)[1])
b <- coef(fit)[2]
eq <- sprintf("z = %.2f * exp(%.2fx)", a, b)
text(3, max(z), eq, pos = 4, col = "black", cex = 0.8)
```

### Plot both Leaf Count and Mass vs. Distance on the same graph

```{R}
# Set up the first plotting region
# Set up the plotting region
par(mar = c(5, 4, 4, 2) + 0.1, oma = c(0, 0, 0, 1))
plot(x, y, type = "p", col = "blue", pch = 16, ylab = "", xlab = "Distance (m)", axes = TRUE)

# Add a label on the left side for Y
mtext("Mass (g)", side = 2, line = 2, col = "blue", cex = 1.2)  # Adjust line and cex as needed

#Add an exponential line of best fit
fit <- lm(log(y) ~ x)

# Generate predicted values for the exponential fit
x_pred <- seq(min(x), max(x), length.out = 100)
y_pred <- exp(predict(fit, newdata = data.frame(x = x_pred)))

# Add the exponential line to the plot
lines(x_pred, y_pred, col = "blue", type = "l")


# Overlay the second set of points
par(new = TRUE)
plot(x, z, type = "p", col = "firebrick2", pch = 16, ylab = "", xlab = "", axes = FALSE)

#Add line of best fit
fit <- lm(log(z) ~ x)
x_pred <- seq(min(x), max(x), length.out = 100)
z_pred <- exp(predict(fit, newdata = data.frame(x = x_pred)))
lines(x_pred, z_pred, col = "firebrick2", type = "l")


# Add a label on the right side for Z
mtext("Count", side = 4, line = 2, col = "firebrick2", cex = 1.2)  # Adjust line and cex as needed

# Add a y-axis on the right side for Z
axis(4, col = "black", col.axis = "black", las = 1)  # Set color for Z axis

# Add a legend
legend("topright", legend = c("Mass (g)", "Count"), col = c("blue", "firebrick2"), pch = 16)
```






